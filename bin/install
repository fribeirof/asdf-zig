#!/usr/bin/env bash

set -ueo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/../lib/json.bash"

trap cleanup SIGINT SIGTERM ERR

cleanup() {
  trap - SIGINT SIGTERM ERR
  rm -rf "$ASDF_INSTALL_PATH"
  echo
  echo -e "\e[33mCleanup:\e[m Something went wrong!"
  echo
  echo "$(caller): ${BASH_COMMAND}"
}

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

# https://github.com/mlugg/setup-zig/blob/main/mirrors.json
# If any of these mirrors are down, please open an issue!
mirrors=(
  "https://pkg.machengine.org/zig"
  "https://zigmirror.hryx.net/zig"
  "https://zig.linus.dev/zig"
  "https://fs.liujiacai.net/zigbuilds"
  "https://zigmirror.nesovic.dev/zig"
  "https://zig.nekos.space/zig"
)
mirror_length=${#mirrors[@]}

download_and_check() {
  local url=$1
  local output=$2
  local expected_shasum=$3

  echo "Download from $url"
  curl --fail --progress-bar --location --create-dirs --output "$output" "$url"

  [ -f "$output" ] || { echo "Download failed."; return 1; }

  local actual_shasum
  actual_shasum="$(shasum -a 256 "$output" | awk '{print $1}')"

  if [ -z "$expected_shasum" ]; then
    # TODO: add minisign check, as specific & non-master versions don't have sums in index.json
    tar -tf "${output}" >/dev/null 2>&1
  else
    if [ "${expected_shasum}" != "${actual_shasum}" ]; then
      echo "Checksum not same, expected: ${expected_shasum}, actual: ${actual_shasum}, file: ${source_path}"
      return 1
    fi
  fi
}

download_zig() {
  local download_url=$1
  local source_path=$2
  local expected_shasum=$3

  local filename
  filename=$(echo "$download_url" | awk -F '/' '{print $NF}')
  local start_index=$((RANDOM % mirror_length))
  # Loop through the mirrors
  for i in $(seq 0 $((mirror_length - 1))); do
    current_index=$(((start_index + i) % mirror_length))
    local current_mirror=${mirrors[$current_index]}
    local current_url="${current_mirror}/${filename}"
    download_and_check "${current_url}" "$source_path" "$expected_shasum" && return 0
  done

  if ! download_and_check "$download_url" "$source_path" "$expected_shasum"; then
    fail "Checksum not same, expected: ${expected_shasum}, actual: ${actual_shasum}, file: ${source_path}"
  fi
}

install_zig() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$install_type" != "version" ]; then
    fail "asdf-zig supports release installs only"
  fi

  local platform

  case "$OSTYPE" in
    darwin*) platform="macos" ;;
    freebsd*) platform="freebsd" ;;
    linux*) platform="linux" ;;
    *) fail "Unsupported platform" ;;
  esac

  local architecture

  case "$(uname -m)" in
    aarch64* | arm64) architecture="aarch64" ;;
    armv7*) architecture="armv7a" ;;
    i686*) architecture="i386" ;;
    riscv64*) architecture="riscv64" ;;
    x86_64*) architecture="x86_64" ;;
    *) fail "Unsupported architecture" ;;
  esac

  local json
  echo "∗ Downloading index.json..."
  index_url="${ASDF_ZIG_INDEX_URL:-https://ziglang.org/download/index.json}"
  json=$(curl --fail --progress-bar --location "${index_url}")

  local download_url
  if [[ $version == *"+"* ]]; then
    download_url="https://ziglang.org/builds/zig-${platform}-${architecture}-${version}.tar.xz"
  else
    download_url=$(
      json_parse "$json" |
        grep "\[\"$version\",\"${architecture}-${platform}\",\"tarball\"\]" |
        awk 'NR==1 { print $2 }' |
        tr -d '"'
    )
  fi

  local expected_shasum
  if json_parse "$json" | grep -q "\[\"$version\",\"${architecture}-${platform}\",\"shasum\"\]"; then
    expected_shasum=$(
      json_parse "$json" | grep "\[\"$version\",\"${architecture}-${platform}\",\"shasum\"\]" |
        awk 'NR==1 { print $2 }' |
        tr -d '"'
    )
  fi

  local source_path="${install_path}/zig-${platform}-${architecture}-${version}.tar.xz"

  echo "∗ Downloading..."
  download_zig "$download_url" "$source_path" "$expected_shasum"

  echo "∗ Extracting and install..."
  tar -xf "$source_path" -C "$install_path" --strip-components=1
  mkdir -p "${install_path}/bin"
  ln -s "${install_path}/zig" "${install_path}/bin/zig"
  echo "${version} was installed successful!"
}

install_zig "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
